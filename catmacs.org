#+TITLE: Catmacs
#+PROPERTY: header-args:emacs-lisp :tangle ./emacs.d/init.el :mkdirp yes
#+EXPORT_FILE_NAME: README.md

Catmacs is my own emacs configuration, inspired by System Crafter emacs from scratch series.

* Kitchen sink

#+begin_src emacs-lisp

                                          ; Set backup out of the way
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))

  (setq custom-file (concat user-emacs-directory "/custom.el"))
                                          ; == Packages == ;
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)

                                          ; == UI == ;
  (setq inhibit-startup-message t)
  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (menu-bar-mode -1)          ; Disable the menu bar
  (blink-cursor-mode 0)       ; Not blinking cursor
  (set-face-attribute 'default nil :font "Fira Code" :height 110 :weight 'semi-bold)

  (use-package general
    :config
    (general-create-definer catmacs/leader-key
      :keymaps '(normal visual emacs)
      :prefix "SPC"))

  ;; NOTE: The first time you load your configuration on a new machine, you'll
  ;; need to run the following command interactively so that mode line icons
  ;; display correctly:
  ;;
  ;; M-x all-the-icons-install-fonts
  (use-package all-the-icons)

                                          ; == UX == ;
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package rainbow-delimiters
    :hook (emacs-lisp-mode . rainbow-delimiters-mode))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)))

  (use-package swiper)

  (use-package ivy
    :diminish
    :bind (:map ivy-minibuffer-map
                ("TAB" . ivy-alt-done)
                ("C-l" . ivy-alt-done)
                ("C-j" . ivy-next-line)
                ("C-f" . ivy-previous-line)
                :map ivy-switch-buffer-map
                ("C-f" . ivy-previous-line)
                ("C-l" . ivy-done)
                ("C-d" . ivy-switch-buffer-kill)
                :map ivy-reverse-i-search-map
                ("C-k" . ivy-previous-line)
                ("C-d" . ivy-reverse-i-search-kill))
    :config (ivy-mode 1))

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.75))


                                          ; == Programming == ;
  (setq-default
   indent-tabs-mode nil ; Use space for indenting
   tab-width 2)
                                          ;show-trailing-whitespace t) ; FIXME only show whitespace in prog mode
                                          ;(add-hook 'prog-mode-hook 'whitepace-mode)
  (setq indent-line-function 'insert-tab)

  (use-package highlight-indent-guides)
  (setq highlight-indent-guides-method 'character)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :init
    (setq projectile-project-search-path '("~/work/thecodeisgreen" "~/prog"))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))

  (use-package magit)

  (use-package forge)

  (use-package org)

  (global-unset-key (kbd "C-s")) ; unbind C-s to use save buffer instead

  (general-define-key
   "C-s" #'save-buffer
   "C-f" #'swiper
   "C-p" #'counsel-projectile-find-file)

                                          ; escape quit transient window
  (general-define-key
   :keymaps 'transient-base-map
   "<escape>" 'transient-quit-one)
#+end_src

* EVIL!
I use [[https://github.com/emacs-evil/evil][Evil]] for my vim needs. C-f and C-p are unbinded to use swiper and cousel-project-find-file instead.

#+begin_src emacs-lisp

  (use-package evil
    :bind (("C-k" . evil-scroll-up)
           ("C-j" . evil-scroll-down))
    :init
    (setq evil-want-keybinding nil)
    (setq evil-collection-setup-minibuffer t)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)

    (define-key evil-motion-state-map (kbd "C-f") nil)
    (define-key evil-normal-state-map (kbd "C-p") nil))

#+end_src

** Evil collection
[[https://github.com/emacs-evil/evil-collection][Evil collection]] provide vim binding for the part of Emacs that are not covered by the base evil package.

#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

** Evil surround
[[https://github.com/emacs-evil/evil-surround][Evil surround]] is a port of vim surround.

#+begin_src emacs-lisp

  (use-package evil-surround
    :config
    (global-evil-surround-mode))

#+end_src

* Keybindings
Custom keybinding, prefixed with general.

#+begin_src emacs-lisp

  (catmacs/leader-key
    "ct" '(counsel-load-theme :which-key "choose theme")
    "cm" '(magit :which-key "magit")
    "x" '(counsel-M-x :which-key "M-x")
    "w" '(evil-window-map :which-key "window management")
    "l" '(lsp-command-map :which-key "lsp")
    "p" '(projectile-command-map :which-key "projectile"))

#+end_src

* UI
** Theme
I use the excellent doom theme as a base for my custom palenight (mainly swapped colors around).

#+begin_src emacs-lisp

  (use-package doom-modeline
    :init (doom-modeline-mode 1))

  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    :init (load-theme 'catmacs-palenight t))

#+end_src

** Fringe
Configure a fringe left and right of the buffer. We set the background to nil so it takes the same color has the background color of the buffer.

#+begin_src emacs-lisp

  (set-fringe-mode 15)
  (set-face-attribute 'fringe nil :background nil)

#+end_src

** Line numbering
I Use relative line numbering everywhere except for org-mode and some term-mode, where I don't display any numbering.

#+begin_src emacs-lisp

  (setq display-line-numbers-type 'relative)

  (global-display-line-numbers-mode t)

  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  neotree-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Tabs
[[https://github.com/ema2159/centaur-tabs][Centaur tabs]] is a highly configurable tab plugin

#+begin_src emacs-lisp

  (use-package centaur-tabs
    :demand
    :config
    (setq centaur-tabs-show-new-tab-button nil
     centaur-tabs-style "box"
     centaur-tabs-set-icons t
     centaur-tabs-gray-out-icons 'buffer
     centaur-tabs-set-close-button nil
     centaur-tabs-height 64
     centaur-tabs-set-modified-marker t
     centaur-tabs-cycle-scope 'tabs
     centaur-tabs-set-bar 'over)
    (centaur-tabs-mode t)
    (centaur-tabs-headline-match)
    (centaur-tabs-group-by-projectile-project)
    :bind
    (:map evil-normal-state-map
          ("g t" . centaur-tabs-forward)
          ("g T" . centaur-tabs-backward)))

  (catmacs/leader-key
    "tt" '(centaur-tabs--create-new-tab :which-key "new tab")
    "ts" '(centaur-tabs-counsel-switch-group :which-key "switch tabs group"))

#+end_src

* UX
** Neotree
[[https://github.com/jaypei/emacs-neotree][Neotree]] is a tree plugin inspired by NerdTree for vim

#+begin_src emacs-lisp

  (use-package neotree
    :config
    (setq neo-theme 'icons))


  (catmacs/leader-key
    "n" '(neotree-toggle :which-key "neotree"))

#+end_src

** Avy
[[http://github.com/abo-abo/avy][Avy]] is a easy motion inspired jump anywhere package.

#+begin_src emacs-lisp

  (use-package avy)

  (catmacs/leader-key
    "aa" '(avy-goto-line :which-key "avy line")
    "as" '(avy-goto-char :which-key "avy char")
    "ad" '(avy-goto-word-or-subword-1 :which-key "avy word"))

#+end_src

**  TODO Ace window
** Yes or no
Respond at the "yes or no" question with just y or n

#+begin_src emacs-lisp

  (fset 'yes-or-no-p 'y-or-n-p)

#+end_src

* Org Mode
** Configuration

#+begin_src emacs-lisp

  (defun catmacs/org-mode-setup ()
    (org-indent-mode 1)
                                          ;(variable-pitch-mode 1)
    (visual-line-mode 1))

  (use-package org
    :hook (org-mode . catmacs/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"))

#+end_src

Adding bash and javascript to the org-babel loaded languages.

#+begin_src emacs-lisp

  (require 'ob-js)
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (js . t)))

#+end_src

** Org template
Some shortcuts for the most used language, elisp, sh and javascript. Use it with ~<el~ + ~TAB~ to generate a source block.

#+begin_src emacs-lisp

  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("js" . "src javascript"))
  (require 'org-tempo)

#+end_src

** Org bullets
Make bullet prettier.

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))

#+end_src

** Visual fill columns
Add some margin left and right of an org documents.

#+begin_src emacs-lisp
  (defun catmacs/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . catmacs/org-mode-visual-fill))

#+end_src
   
** TODO Async execution
[[https://github.com/astahlman/ob-async][ob-async]]

#+begin_src emacs-lisp

  (use-package ob-async)

#+end_src

org-sh-stream
#+begin_src emacs-lisp

  ;(expand-file-name "ob-shstream.el" "~/emacs.d/lisp/")

  ;(require 'ob-shstream)

#+end_src
* Development
** Language server protocol
IDE features are provided with languages servers and lsp-mode.

*** lsp-mode
lsp-mode connect to language server and give access to code completion, definition, references, refactoring and more.

#+begin_src emacs-lisp

  (defun catmacs/lsp-mode-setup ()
    (lsp-enable-which-key-intgration)
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init (setq lsp-keymap-prefix "C-c l")
    :config 
    (lsp-enable-which-key-integration t)
    (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
    :hook ((lsp-mode  catmacs/lsp-mode-setup)
           (rjsx-mode . lsp-deferred)))

#+end_src

*** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] Provide searching for symbol in project
Example of commands:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy)

#+end_src

** Languages configuration

*** Elisp
*** Javascript
**** Configuration

To use lsp with javascript, the =typescript-language-server= and =typescript= npm package must be available globally. To install it run:

#+begin_src sh :results replace drawer

  yarn global add typescript typescript-language-server

#+end_src

#+results:

FIXME: try to detect if a js file is jsx or not.
if yes use rjsx
else use js2-mode ?

#+begin_src emacs-lisp

  (use-package rjsx-mode
    :mode ("\\.jsx?$" . rjsx-mode)
    :config (setq js-indent-level 2))

#+end_src

**** Eslint

Run ~eslint --fix~ automatically when saving file.

#+begin_src emacs-lisp
  (defun catmacs/eslint-fix-file ()
    (interactive)
    (shell-command (concat "eslint --fix " (buffer-file-name))))

  (eval-after-load 'rjsx-mode
    '(add-hook 'rjsx-mode-hook
               (lambda ()
                 (add-hook 'after-save-hook #'catmacs/eslint-fix-file nil t))))

#+end_src

**** TODO Flycheck

**** TODO REPL

look into [[https://github.com/abicky/nodejs-repl.el][nodejs-repl]] 

*** TODO Typescript
*** TODO Haskell
*** TODO Purescript

** Company

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    (:map lsp-mode-map
          ("<tab>" . company-indent-or-complete-common))
    :custom
   (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src
